{"version":3,"sources":["components/AddCategory.js","components/GifGridItems.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","GifGridItems","title","url","className","src","alt","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAoBhD,OACE,0BAAMC,SAbY,SAACC,GACnBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,OAQd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SArBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YCNdG,EAAe,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,MAAMC,EAAS,EAATA,IAElC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPGK,EAAO,uCAAG,WAAOX,GAAP,uBAAAY,EAAA,6DACfL,EADe,0FAC2EM,UAAUb,GADrF,sBAEFc,MAAMP,GAFJ,cAEfQ,EAFe,gBAGEA,EAAKC,OAHP,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QATjB,kBAadW,GAbc,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEdR,mBAAS,CACjCyB,KAAM,GACNQ,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAW,WAETjB,EAAQX,GACL6B,MAAK,SAAAC,GAEJH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAKd,CAACzB,IAEG0B,EDlBmBK,CAAa/B,GAA/BiB,EAF+B,EAE/BA,KAAMQ,EAFyB,EAEzBA,QAEd,OAEE,oCAEE,wBAAIjB,UAAU,sCAAsCR,GAElDyB,GAAW,uBAAGjB,UAAU,oCAAb,WAEb,yBAAKA,UAAU,aAGTS,EAAKE,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACEY,IAAKZ,EAAIC,IACLD,UEOLa,EAzBM,SAAAC,GAAS,MAEQ1C,mBAAS,CAAC,cAFlB,mBAErB2C,EAFqB,KAET5C,EAFS,KAI5B,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAiBA,IAC9B,6BAEA,4BAEI4C,EAAWhB,KAAI,SAAAnB,GAAQ,OACrB,kBAAC,EAAD,CACEgC,IAAKhC,EACLA,SAAUA,U,MCbxBoC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.1824205a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  \n  const [inputValue, setInputValue] = useState('')\n  \n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSumit = (e) => {\n    e.preventDefault(); // Previene el refresh al momento de darle ente al formulario\n\n    // evitar el ingresar valores vacios\n    if ( inputValue.trim().length > 2 ){\n      setCategories(category => [inputValue, ...category,]);\n      setInputValue('');\n    }else {\n\n    }\n  }\n  \n  return (\n    <form onSubmit={handleSumit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport const GifGridItems = ({title,url}) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=jECcFj1w0D2TbnwBYmkk2O2pKPfpevJk&q=${ encodeURI(category) }&limit=10`; \n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  \n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  });\n\n  return gifs;\n\n}","import React from 'react'\nimport { GifGridItems } from './GifGridItems';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GifGrid = ({ category }) => {\n\n  const { data, loading } = useFetchGifs(category);\n  \n  return (\n\n    <>\n    \n      <h3 className=\"animate__animated animate__flipInX\">{category}</h3>\n\n      { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n      <div className=\"card-grid\">\n        \n          {\n            data.map(img => (\n              <GifGridItems \n                key={img.id}\n                {...img }\n              />\n            ))\n          }\n\n        </div>\n\n    </>\n  )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  \n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n\n    getGifs(category)\n      .then(imgs => {\n        \n        setState({\n          data: imgs,\n          loading: false\n        });\n\n      });\n\n  }, [category])\n\n  return state // { data: [], loading:true }\n  \n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = props => {\n  // push muta el arreglo, la funcion del hook agrega sin mutar\n  const [categories, setCategories] = useState(['One Punch']);\n\n  return (\n    <>\n      <h1>GifExpertApp</h1>\n      <AddCategory setCategories = {setCategories}/> \n      <hr/> \n\n      <ol>\n        {\n          categories.map(category => ( \n            <GifGrid \n              key={category}\n              category={category} \n            />\n          ))\n        }\n      </ol>\n\n    </>\n  );\n};\n\nexport default GifExpertApp\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}